/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.osgi.demo.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.osgi.demo.model.OSGi_Foo;
import com.liferay.osgi.demo.service.OSGi_FooLocalService;
import com.liferay.osgi.demo.service.persistence.OSGi_FooPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.service.persistence.ClassNamePersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the o s gi_ foo local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.osgi.demo.service.impl.OSGi_FooLocalServiceImpl}.
 * </p>
 *
 * @author milen
 * @see com.liferay.osgi.demo.service.impl.OSGi_FooLocalServiceImpl
 * @see com.liferay.osgi.demo.service.OSGi_FooLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class OSGi_FooLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements OSGi_FooLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.osgi.demo.service.OSGi_FooLocalServiceUtil} to access the o s gi_ foo local service.
	 */

	/**
	 * Adds the o s gi_ foo to the database. Also notifies the appropriate model listeners.
	 *
	 * @param osGi_Foo the o s gi_ foo
	 * @return the o s gi_ foo that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public OSGi_Foo addOSGi_Foo(OSGi_Foo osGi_Foo) {
		osGi_Foo.setNew(true);

		return osGi_FooPersistence.update(osGi_Foo);
	}

	/**
	 * Creates a new o s gi_ foo with the primary key. Does not add the o s gi_ foo to the database.
	 *
	 * @param fooId the primary key for the new o s gi_ foo
	 * @return the new o s gi_ foo
	 */
	@Override
	public OSGi_Foo createOSGi_Foo(long fooId) {
		return osGi_FooPersistence.create(fooId);
	}

	/**
	 * Deletes the o s gi_ foo with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fooId the primary key of the o s gi_ foo
	 * @return the o s gi_ foo that was removed
	 * @throws PortalException if a o s gi_ foo with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public OSGi_Foo deleteOSGi_Foo(long fooId) throws PortalException {
		return osGi_FooPersistence.remove(fooId);
	}

	/**
	 * Deletes the o s gi_ foo from the database. Also notifies the appropriate model listeners.
	 *
	 * @param osGi_Foo the o s gi_ foo
	 * @return the o s gi_ foo that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public OSGi_Foo deleteOSGi_Foo(OSGi_Foo osGi_Foo) {
		return osGi_FooPersistence.remove(osGi_Foo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(OSGi_Foo.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return osGi_FooPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osgi.demo.model.impl.OSGi_FooModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return osGi_FooPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osgi.demo.model.impl.OSGi_FooModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return osGi_FooPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return osGi_FooPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return osGi_FooPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public OSGi_Foo fetchOSGi_Foo(long fooId) {
		return osGi_FooPersistence.fetchByPrimaryKey(fooId);
	}

	/**
	 * Returns the o s gi_ foo with the primary key.
	 *
	 * @param fooId the primary key of the o s gi_ foo
	 * @return the o s gi_ foo
	 * @throws PortalException if a o s gi_ foo with the primary key could not be found
	 */
	@Override
	public OSGi_Foo getOSGi_Foo(long fooId) throws PortalException {
		return osGi_FooPersistence.findByPrimaryKey(fooId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.liferay.osgi.demo.service.OSGi_FooLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(OSGi_Foo.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName("fooId");

		return actionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.liferay.osgi.demo.service.OSGi_FooLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(OSGi_Foo.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName("fooId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return osGi_FooLocalService.deleteOSGi_Foo((OSGi_Foo)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return osGi_FooPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the o s gi_ foos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.osgi.demo.model.impl.OSGi_FooModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of o s gi_ foos
	 * @param end the upper bound of the range of o s gi_ foos (not inclusive)
	 * @return the range of o s gi_ foos
	 */
	@Override
	public List<OSGi_Foo> getOSGi_Foos(int start, int end) {
		return osGi_FooPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of o s gi_ foos.
	 *
	 * @return the number of o s gi_ foos
	 */
	@Override
	public int getOSGi_FoosCount() {
		return osGi_FooPersistence.countAll();
	}

	/**
	 * Updates the o s gi_ foo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param osGi_Foo the o s gi_ foo
	 * @return the o s gi_ foo that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public OSGi_Foo updateOSGi_Foo(OSGi_Foo osGi_Foo) {
		return osGi_FooPersistence.update(osGi_Foo);
	}

	/**
	 * Returns the o s gi_ foo local service.
	 *
	 * @return the o s gi_ foo local service
	 */
	public com.liferay.osgi.demo.service.OSGi_FooLocalService getOSGi_FooLocalService() {
		return osGi_FooLocalService;
	}

	/**
	 * Sets the o s gi_ foo local service.
	 *
	 * @param osGi_FooLocalService the o s gi_ foo local service
	 */
	public void setOSGi_FooLocalService(
		com.liferay.osgi.demo.service.OSGi_FooLocalService osGi_FooLocalService) {
		this.osGi_FooLocalService = osGi_FooLocalService;
	}

	/**
	 * Returns the o s gi_ foo remote service.
	 *
	 * @return the o s gi_ foo remote service
	 */
	public com.liferay.osgi.demo.service.OSGi_FooService getOSGi_FooService() {
		return osGi_FooService;
	}

	/**
	 * Sets the o s gi_ foo remote service.
	 *
	 * @param osGi_FooService the o s gi_ foo remote service
	 */
	public void setOSGi_FooService(
		com.liferay.osgi.demo.service.OSGi_FooService osGi_FooService) {
		this.osGi_FooService = osGi_FooService;
	}

	/**
	 * Returns the o s gi_ foo persistence.
	 *
	 * @return the o s gi_ foo persistence
	 */
	public OSGi_FooPersistence getOSGi_FooPersistence() {
		return osGi_FooPersistence;
	}

	/**
	 * Sets the o s gi_ foo persistence.
	 *
	 * @param osGi_FooPersistence the o s gi_ foo persistence
	 */
	public void setOSGi_FooPersistence(OSGi_FooPersistence osGi_FooPersistence) {
		this.osGi_FooPersistence = osGi_FooPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.service.ClassNameService getClassNameService() {
		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.service.ClassNameService classNameService) {
		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.osgi.demo.model.OSGi_Foo",
			osGi_FooLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.osgi.demo.model.OSGi_Foo");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	protected Class<?> getModelClass() {
		return OSGi_Foo.class;
	}

	protected String getModelClassName() {
		return OSGi_Foo.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = osGi_FooPersistence.getDataSource();

			DB db = DBFactoryUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.osgi.demo.service.OSGi_FooLocalService.class)
	protected com.liferay.osgi.demo.service.OSGi_FooLocalService osGi_FooLocalService;
	@BeanReference(type = com.liferay.osgi.demo.service.OSGi_FooService.class)
	protected com.liferay.osgi.demo.service.OSGi_FooService osGi_FooService;
	@BeanReference(type = OSGi_FooPersistence.class)
	protected OSGi_FooPersistence osGi_FooPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameLocalService.class)
	protected com.liferay.portal.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameService.class)
	protected com.liferay.portal.service.ClassNameService classNameService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
	private String _beanIdentifier;
}